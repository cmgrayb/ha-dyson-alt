name: Tests

# Note: Testing limited to Python 3.13 due to pytest-homeassistant-custom-component
# dependency compatibility issues with older Python versions

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements-dev.txt', 'requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Cache pytest and mypy
        uses: actions/cache@v4
        with:
          path: |
            .pytest_cache
            .mypy_cache
            .coverage
          key: ${{ runner.os }}-pytest-mypy-${{ matrix.python-version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pytest-mypy-${{ matrix.python-version }}-
            ${{ runner.os }}-pytest-mypy-

      - name: Verify installation
        run: |
          python -c "import custom_components.hass_dyson; print('✅ Integration import successful')"
          python -c "import pytest; print(f'✅ Pytest version: {pytest.__version__}')"

      - name: Run all tests with coverage
        run: |
          python -m pytest tests/ \
            --cov=custom_components.hass_dyson \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            -v \
            --tb=short

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: ${{ runner.os }}-pip-quality-${{ hashFiles('requirements-dev.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-quality-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run Black formatting check
        run: |
          python -m black --check --diff .

      - name: Run isort import sorting check
        run: |
          python -m isort --check-only --diff .

      - name: Run Flake8 linting
        run: |
          python -m flake8 . --count --show-source --statistics

      - name: Run MyPy type checking
        run: |
          python -m mypy custom_components/hass_dyson --ignore-missing-imports

      - name: Run Bandit security check
        run: |
          python -m bandit -r custom_components/ -f json || true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run integration tests
        run: |
          python -m pytest tests/ -m "integration" -v --tb=short

      - name: Run unit tests
        run: |
          python -m pytest tests/ -m "not integration" -v --tb=short

  build:
    name: Build Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, quality, integration, build]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.quality.result }}" = "success" ] && [ "${{ needs.integration.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All checks passed!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some checks failed.** Please review and fix the issues above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
