name: PR Tests

# Note: Testing limited to Python 3.13 due to pytest-homeassistant-custom-component
# dependency compatibility issues with older Python versions

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  quick-test:
    name: Quick Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: ${{ runner.os }}-pip-pr-${{ hashFiles('requirements-dev.txt', 'requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-pr-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Cache pytest and mypy
        uses: actions/cache@v4
        with:
          path: |
            .pytest_cache
            .mypy_cache
          key: ${{ runner.os }}-pytest-mypy-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pytest-mypy-

      - name: Verify installation
        run: |
          python -c "import custom_components.hass_dyson; print('✅ Integration import successful')"

      - name: Run all tests in /tests folder
        run: |
          echo "🧪 Running all tests defined in the /tests folder..."
          python -m pytest tests/ \
            --cov=custom_components.hass_dyson \
            --cov-report=term-missing \
            -v \
            --tb=short \
            --maxfail=5

      - name: Quick code quality check
        run: |
          echo "🔍 Running quick code quality checks..."
          python -m black --check . || echo "❌ Black formatting failed"
          python -m isort --check-only . || echo "❌ Import sorting failed"
          python -m flake8 . --count || echo "❌ Flake8 linting failed"

      - name: Test results summary
        if: always()
        run: |
          echo "## Quick Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This PR has been tested with all tests defined in the \`/tests\` folder." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ **All tests passed!** 🎉" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your changes look good and all existing functionality is preserved." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some tests failed.** Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Fix the failing tests and push your changes to trigger this workflow again." >> $GITHUB_STEP_SUMMARY
          fi

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run tests with detailed coverage
        run: |
          python -m pytest tests/ \
            --cov=custom_components.hass_dyson \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-branch \
            -v

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7

      - name: Coverage summary
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Coverage analysis has been completed for all tests in \`/tests\` folder." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View the detailed coverage report in the artifacts section of this workflow run." >> $GITHUB_STEP_SUMMARY
